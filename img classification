from keras.datasets import cifar10

(x_train, y_train), (x_test, y_test) = cifar10.load_data()

import numpy as np
from keras.utils import to_categorical
import matplotlib.pyplot as plt
%matplotlib inline

(train_X,train_Y), (test_X,test_Y) = cifar10.load_data()

print('Training data shape : ', train_X.shape, train_Y.shape)
print('Testing data shape : ', test_X.shape, test_Y.shape)

classes = np.unique(train_Y)
nClasses = len(classes)
print('Total number of outputs : ', nClasses)
print('Output classes : ', classes)

train_X = train_X.astype('float32')
test_X = test_X.astype('float32')
train_X = train_X / 255.
test_X = test_X / 255.

# Change the labels from categorical to one-hot encoding
train_Y_one_hot = to_categorical(train_Y)
test_Y_one_hot = to_categorical(test_Y)

# Display the change for category label using one-hot encoding
print('Original label:', train_Y[0])
print('After conversion to one-hot:', train_Y_one_hot[0])

# So let's convert the training and testing labels into one-hot encoding vectors:

from sklearn.model_selection import train_test_split
train_X,valid_X,train_label,valid_label = train_test_split(train_X, train_Y_one_hot, test_size=0.2, random_state=13)

train_X.shape,valid_X.shape,train_label.shape,valid_label.shape

batch_size = 64
epochs = 10
num_classes = 10

cifar_model = Sequential()
cifar_model.add(Conv2D(32, kernel_size=(3, 3),activation='linear',input_shape=(32,32,3),padding='same'))
cifar_model.add(LeakyReLU(alpha=0.1))
cifar_model.add(MaxPooling2D((2, 2),padding='same'))
cifar_model.add(Dropout(0.25))
cifar_model.add(Conv2D(64, (3, 3), activation='linear',padding='same'))
cifar_model.add(LeakyReLU(alpha=0.1))
cifar_model.add(MaxPooling2D(pool_size=(2, 2),padding='same'))
cifar_model.add(Dropout(0.25))
cifar_model.add(Flatten())
cifar_model.add(Dense(32, activation='linear'))   
cifar_model.add(Dense(64, activation='linear'))                 
cifar_model.add(Dense(num_classes, activation='softmax'))

cifar_model.compile(loss=keras.losses.categorical_crossentropy, optimizer=keras.optimizers.Adam(),metrics=['accuracy'])

# Showing some parameters (weights and biases) in each layer and also the total parameters in our model by summarizing.

cifar_model.summary()

# Train the Model
# Finally trai ning the model with Keras' fit() function! The model trains for 20 epochs. 
# The fit() function will return a history object; By storying the result of this function in digar_train.

cifar_train = cifar_model.fit(train_X, train_label, batch_size=batch_size,epochs=epochs,verbose=1,validation_data=(valid_X, valid_label))

accuracy = cifar_train.history['acc']
val_accuracy = cifar_train.history['val_acc']
loss = cifar_train.history['loss']
val_loss = cifar_train.history['val_loss']
epochs = range(len(accuracy))
plt.figure(figsize=[10,5])
plt.plot(epochs, accuracy, 'bo', label='Training accuracy')
plt.plot(epochs, val_accuracy, 'b', label='Validation accuracy')
plt.title('Training and validation accuracy')
plt.legend()
plt.show()

plt.figure(figsize=[10,5])
plt.plot(epochs, loss, 'bo', label='Training loss')
plt.plot(epochs, val_loss, 'b', label='Validation loss')
plt.title('Training and validation loss')
plt.legend()
plt.show()

def model_2():
    cifar_model_2 = Sequential()
    cifar_model_2.add(Conv2D(32, kernel_size=(3, 3),activation='linear',input_shape=(32,32,3),padding='same'))
    cifar_model_2.add(LeakyReLU(alpha=0.1))
    cifar_model_2.add(MaxPooling2D((2, 2),padding='same'))
    cifar_model_2.add(Dropout(0.25))
    cifar_model_2.add(Conv2D(64, (3, 3), activation='linear',padding='same'))
    cifar_model_2.add(LeakyReLU(alpha=0.1))
    cifar_model_2.add(MaxPooling2D(pool_size=(2, 2),padding='same'))
    cifar_model_2.add(Dropout(0.25))
    cifar_model_2.add(Flatten())
    cifar_model_2.add(Dense(32, activation='linear'))   
    cifar_model_2.add(Dense(64, activation='linear'))                 
    cifar_model_2.add(Dense(num_classes, activation='softmax'))
    return cifar_model_2
    
second_model = model_2()
second_model.compile(loss=keras.losses.categorical_crossentropy, optimizer=keras.optimizers.rmsprop(),metrics=['accuracy'])

# Train the Model
# Finally trai ning the model with Keras' fit() function! The model trains for 20 epochs. 
# The fit() function will return a history object; By storying the result of this function in digar_train.

cifar_train_again = second_model.fit(train_X, train_label, batch_size=batch_size,epochs=epochs,verbose=1,validation_data=(valid_X, valid_label))
